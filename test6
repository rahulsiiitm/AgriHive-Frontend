import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http_parser/http_parser.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http/http.dart' as http;
import 'package:mime/mime.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key, required String userId});

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  bool _notificationsEnabled = true;
  String userId = '6G9n9E6m34TgvycktbAy02uLH912'; // Replace with actual user ID
  Map<String, dynamic>? profileData;
  final ImagePicker _picker = ImagePicker();
  bool _isLoading = true;
  String? _errorMessage;

  final String apiBaseUrl = 'http://10.0.2.2:5000';

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final data = await fetchProfile(userId);
      setState(() {
        profileData = data;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
      print('Error loading profile: $e');
    }
  }

  Future<Map<String, dynamic>?> fetchProfile(String userId) async {
    try {
      print('Fetching profile for userId: $userId');
      print('API URL: $apiBaseUrl/get_farmer_profile?userId=$userId');
      
      final response = await http.get(
        Uri.parse('$apiBaseUrl/get_farmer_profile?userId=$userId'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      ).timeout(
        Duration(seconds: 10),
        onTimeout: () {
          throw Exception('Request timed out. Check your server connection.');
        },
      );

      print('Response status code: ${response.statusCode}');
      print('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        
        // Check if the response has the expected structure
        if (responseData.containsKey('profile')) {
          return responseData['profile'] as Map<String, dynamic>;
        } else {
          throw Exception('Invalid response format: missing profile data');
        }
      } else if (response.statusCode == 404) {
        throw Exception('Profile not found. Please create a profile first.');
      } else {
        final errorData = json.decode(response.body);
        throw Exception('Server error: ${errorData['error'] ?? 'Unknown error'}');
      }
    } on SocketException {
      throw Exception('Network error: Cannot connect to server. Please check your internet connection.');
    } on FormatException {
      throw Exception('Invalid response format from server.');
    } catch (e) {
      throw Exception('Failed to load profile: $e');
    }
  }

  Future<bool> updateProfile(
    String userId,
    Map<String, dynamic> updates,
  ) async {
    try {
      print('Updating profile for userId: $userId');
      print('Updates: $updates');
      
      final response = await http.post(
        Uri.parse('$apiBaseUrl/update_farmer_profile'),
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode({'userId': userId, 'updates': updates}),
      );

      print('Update response: ${response.statusCode} - ${response.body}');
      return response.statusCode == 200;
    } catch (e) {
      print('Error updating profile: $e');
      return false;
    }
  }

  Future<bool> uploadPhoto(File imageFile) async {
    try {
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$apiBaseUrl/upload_profile_photo'),
      );
      request.fields['userId'] = userId;
      final mimeType = lookupMimeType(imageFile.path) ?? 'image/jpeg';

      request.files.add(
        await http.MultipartFile.fromPath(
          'photo',
          imageFile.path,
          contentType: MediaType.parse(mimeType),
        ),
      );

      final response = await request.send();
      return response.statusCode == 200;
    } catch (e) {
      print('Error uploading photo: $e');
      return false;
    }
  }

  Widget _buildErrorWidget() {
    return Center(
      child: Padding(
        padding: EdgeInsets.all(20),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.red[300],
            ),
            SizedBox(height: 16),
            Text(
              'Failed to Load Profile',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.grey[800],
              ),
            ),
            SizedBox(height: 8),
            Text(
              _errorMessage ?? 'Unknown error occurred',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _loadProfile,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green[700],
                foregroundColor: Colors.white,
              ),
              child: Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: Text(
          'Profile',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.green[700],
        elevation: 0,
        actions: [
          if (!_isLoading)
            IconButton(
              icon: Icon(Icons.refresh, color: Colors.white),
              onPressed: _loadProfile,
            ),
        ],
      ),
      body: _isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.green[700]!),
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Loading profile...',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 16,
                    ),
                  ),
                ],
              ),
            )
          : _errorMessage != null
              ? _buildErrorWidget()
              : profileData == null
                  ? Center(
                      child: Text(
                        'No profile data available',
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey[600],
                        ),
                      ),
                    )
                  : SingleChildScrollView(
                      child: Column(
                        children: [
                          Container(
                            width: double.infinity,
                            decoration: BoxDecoration(color: Colors.green[700]),
                            child: Padding(
                              padding: EdgeInsets.fromLTRB(20, 0, 20, 30),
                              child: Column(
                                children: [
                                  GestureDetector(
                                    onTap: _showEditPhotoDialog,
                                    child: CircleAvatar(
                                      radius: 40,
                                      backgroundColor: Colors.white,
                                      backgroundImage:
                                          profileData!['profilePhoto'] != null
                                              ? NetworkImage(
                                                  profileData!['profilePhoto'],
                                                )
                                              : null,
                                      child: profileData!['profilePhoto'] == null
                                          ? Icon(
                                              Icons.person,
                                              size: 50,
                                              color: Colors.green[700],
                                            )
                                          : null,
                                    ),
                                  ),
                                  SizedBox(height: 15),
                                  Text(
                                    profileData!['name'] ?? 'Name',
                                    style: TextStyle(
                                      fontSize: 22,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                  SizedBox(height: 5),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.location_on,
                                        color: Colors.white70,
                                        size: 16,
                                      ),
                                      SizedBox(width: 4),
                                      Text(
                                        profileData!['location'] ?? 'Location',
                                        style: TextStyle(color: Colors.white70),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                          SizedBox(height: 20),
                          Padding(
                            padding: EdgeInsets.symmetric(horizontal: 16),
                            child: Column(
                              children: [
                                _buildMenuItem(
                                  Icons.edit,
                                  'Edit Profile',
                                  _showEditProfileDialog,
                                ),
                                _buildMenuItem(
                                  Icons.photo_camera,
                                  'Edit Photo',
                                  _showEditPhotoDialog,
                                ),
                                _buildMenuItem(
                                  Icons.notifications_outlined,
                                  'Notifications',
                                  _showNotificationSettings,
                                ),
                                _buildMenuItem(
                                  Icons.language,
                                  'Language',
                                  _showLanguageDialog,
                                ),
                                _buildMenuItem(
                                  Icons.help_outline,
                                  'Help & Support',
                                  () {},
                                ),
                                _buildMenuItem(Icons.info_outline, 'About', () {}),
                                SizedBox(height: 20),
                                _buildMenuItem(
                                  Icons.logout,
                                  'Logout',
                                  _showLogoutDialog,
                                  isDestructive: true,
                                ),
                              ],
                            ),
                          ),
                          SizedBox(height: 30),
                        ],
                      ),
                    ),
    );
  }

  Widget _buildMenuItem(
    IconData icon,
    String title,
    VoidCallback onTap, {
    bool isDestructive = false,
  }) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 5,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        leading: Container(
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: isDestructive
                ? Colors.red.withOpacity(0.1)
                : Colors.green.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: isDestructive ? Colors.red[600] : Colors.green[600],
            size: 20,
          ),
        ),
        title: Text(
          title,
          style: TextStyle(
            fontWeight: FontWeight.w600,
            color: isDestructive ? Colors.red[600] : Colors.grey[800],
          ),
        ),
        trailing: Icon(
          Icons.arrow_forward_ios,
          size: 16,
          color: Colors.grey[400],
        ),
        onTap: onTap,
      ),
    );
  }

  // Rest of your dialog methods remain the same...
  void _showEditProfileDialog() {
    TextEditingController nameController = TextEditingController(
      text: profileData?['name'] ?? '',
    );
    TextEditingController locationController = TextEditingController(
      text: profileData?['location'] ?? '',
    );

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Edit Profile'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: 'Name',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              TextField(
                controller: locationController,
                decoration: InputDecoration(
                  labelText: 'Location',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: Text('Save'),
              onPressed: () async {
                final updated = await updateProfile(userId, {
                  'name': nameController.text.trim(),
                  'location': locationController.text.trim(),
                });

                Navigator.of(context).pop();
                if (updated) {
                  _loadProfile();
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Profile updated successfully!')),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Failed to update profile')),
                  );
                }
              },
            ),
          ],
        );
      },
    );
  }

  void _showEditPhotoDialog() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      final imageFile = File(pickedFile.path);
      final uploaded = await uploadPhoto(imageFile);
      if (uploaded) {
        _loadProfile();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Profile photo updated!')),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Photo upload failed')),
        );
      }
    }
  }

  void _showNotificationSettings() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text('Notifications'),
              content: SwitchListTile(
                title: Text('Push Notifications'),
                subtitle: Text('Receive weather alerts and crop advisories'),
                value: _notificationsEnabled,
                onChanged: (value) {
                  setState(() {
                    _notificationsEnabled = value;
                  });
                },
              ),
              actions: [
                TextButton(
                  child: Text('Done'),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _showLanguageDialog() {
    List<String> languages = [
      'English',
      'Hindi',
      'Marathi',
      'Gujarati',
      'Tamil',
    ];
    String selectedLanguage = profileData?['language'] ?? 'English';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Select Language'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: languages.map((language) {
              return RadioListTile<String>(
                title: Text(language),
                value: language,
                groupValue: selectedLanguage,
                onChanged: (value) async {
                  Navigator.of(context).pop();
                  await updateProfile(userId, {'language': value});
                  _loadProfile();
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Language changed to $value')),
                  );
                },
              );
            }).toList(),
          ),
          actions: [
            TextButton(
              child: Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        );
      },
    );
  }

  void _showLogoutDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Logout'),
          content: Text('Are you sure you want to logout?'),
          actions: [
            TextButton(
              child: Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: Text('Logout', style: TextStyle(color: Colors.red)),
              onPressed: () {
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Logged out successfully')),
                );
              },
            ),
          ],
        );
      },
    );
  }
}